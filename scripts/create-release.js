const fs = require('fs-extra');
const inquirer = require('inquirer');
const path = require('path');
const semver = require('semver');
const standardVersion = require('standard-version');
const gitUtils = require('./utils/git-utils');
const npmUtils = require('./utils/npm-utils');

/**
 * Returns the default config to be passed to 'standard-version'.
 */
async function getStandardVersionConfig(currentVersion, overrides = {}) {
  const config = {
    noVerify: true, // skip any precommit hooks
    releaseCommitMessageFormat:
      'docs: add release notes for {{currentTag}} release',
    tagPrefix: '', // don't prefix tags with 'v'
  };

  // TODO: maybe instead of checking npm registry, save the version in a local VERSION file?

  const versionExists = await npmUtils.checkVersionExists(
    '@skyux/core',
    currentVersion
  );

  if (!versionExists) {
    // Don't bump the version if this is the first release.
    config.firstRelease = true;
  }

  const semverData = semver.parse(currentVersion);
  const isPrerelease = semverData.prerelease.length > 0;

  if (isPrerelease) {
    /**
     * The semver 'prerelease' value can be an array of length 1 or 2, depending on the prerelease type.
     * For example:
     *   5.0.0-alpha.5 => ['alpha', 5]
     *   5.0.0-5 => [5]
     */
    config.prerelease =
      semverData.prerelease.length === 1 ? true : semverData.prerelease[0];
  }

  return { ...config, ...overrides };
}

/**
 * Returns the bumped version generated by 'standard-version' utility.
 */
async function getNextVersion() {
  const result = await getCommandOutput(
    './node_modules/.bin/standard-version',
    [
      '--dry-run',
      '--skip.bump',
      '--skip.changelog',
      '--skip.commit',
      '--tagPrefix=""',
    ]
  );

  const nextVersion = result.match(/[0-9]\.[0-9]\.[0-9](-(\w*\.)?\d+)?/)[0];

  return nextVersion;
}

/**
 * Creates a 'releases/x.x.x' branch, tags it, and automatically adds release notes to CHANGELOG.md.
 */
async function release() {
  try {
    console.log('Preparing workspace for release...');

    // Ensure all remote changes are represented locally.
    gitUtils.fetchAll();

    // Ensure releases are executed against the main branch.
    if (gitUtils.getCurrentBranch() !== 'main') {
      throw new Error('Releases can only be triggered on the "main" branch.');
    }

    // Ensure local git is clean.
    if (!gitUtils.isGitClean()) {
      throw new Error(
        'Changes found on local branch. Please push (or stash) any changes before creating a release.'
      );
    }

    const packageJson = fs.readJsonSync('package.json');

    const currentVersion = packageJson.version;
    const nextVersion = await getNextVersion();

    const answer = await inquirer.prompt([
      {
        type: 'confirm',
        name: 'proceed',
        message: `This command will generate a tag and release notes for version "${nextVersion}". Proceed?`,
        default: true,
      },
    ]);

    if (!answer.proceed) {
      console.log('Release aborted. Thanks for playing!');
      process.exit(0);
    }

    const branch = `releases/${nextVersion}`;

    console.log(`Creating new branch "${branch}"...`);

    gitUtils.checkoutNewBranch(branch);

    console.log('Generating release artifacts...');

    const standardVersionConfig = getStandardVersionConfig(currentVersion, {
      scripts: {
        // Run prettier on the changelog.
        postchangelog: 'npx prettier --write CHANGELOG.md',
      },
      dryRun: true,
    });

    // Bump version and create changelog.
    await standardVersion(standardVersionConfig);
  } catch (err) {
    console.error(err);
    process.exit(1);
  }
}

release();
